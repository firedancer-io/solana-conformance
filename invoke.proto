syntax = "proto3";
package org.solana.sealevel.v1;

// A set of feature flags.
message FeatureSet {
  // Every item in this list marks an enabled feature.  The value of
  // each item is the first 8 bytes of the feature ID as a little-
  // endian integer.
  repeated fixed64 features = 1;
}

// The complete state of an account excluding its public key.
message AcctState {
  // The account address.  (32 bytes)
  bytes address = 1;

  uint64 lamports = 2;

  // Account data is limited to 10 MiB on Solana mainnet as of 2024-Feb.
  bytes data = 3;

  bool executable = 4;

  // The rent epoch is deprecated on Solana mainnet as of 2024-Feb.
  // If ommitted, implies a value of UINT64_MAX.
  uint64 rent_epoch = 5;

  // Address of the program that owns this account.  (32 bytes)
  bytes owner = 6;
}

// EpochContext includes context scoped to an epoch.
// On "real" ledgers, it is created during the epoch boundary.
message EpochContext {
  FeatureSet features = 1;
}

// SlotContext includes context scoped to a block.
// On "real" ledgers, it is created during the slot boundary.
message SlotContext {}

// TODO: Include return data within the transaction context.
message TxnContext {}

message InstrAcct {
  // Selects an account in an external list
  uint32 index = 1;
  bool is_writable = 2;
  bool is_signer = 3;
}

// The execution context of a program invocation (aka instruction).
// Contains all required information to independently replay an instruction.
// Also includes partial transaction context.
message InstrContext {
  // The address of the program invoked.  (32 bytes)
  bytes program_id = 1;

  // The address of the program loader if the invoked program is a user
  // deployed program.
  bytes loader_id = 2;

  // Account state accessed by the instruction.  This may include
  // indirect accesses like sysvars.
  repeated AcctState accounts = 3;

  // Account access list for this instruction (refers to above accounts list)
  repeated InstrAcct instr_accounts = 4;

  // The input data passed to program execution.
  bytes data = 5;

  uint64 cu_avail = 6;

  TxnContext txn_context = 7;
  SlotContext slot_context = 8;
  EpochContext epoch_context = 9;
}

// The results of executing an InstrContext.
message InstrEffects {
  // result is zero if the instruction executed succesfully.
  // Otherwise, a non-zero error code.  Error codes are not relevant to
  // consensus.
  int32 result = 1;

  // Some error cases additionally have a custom error code.  Unlike
  // the expected_result, this is stable across clients.
  uint32 custom_err = 2;

  // Copies of accounts that were changed.  May be in an arbitrary
  // order.  The pubkey of each account is unique in this list.  Each
  // account address modified here must also be in the
  // InstrContext.
  repeated AcctState modified_accounts = 3;

  uint64 cu_avail = 4;

  bytes return_data = 5;
}

// An instruction processing test fixture.
message InstrFixture {
  InstrContext input = 1;
  InstrEffects output = 2;
}

message ELFBinary {
    bytes data = 1;
}

// Wrapper for the ELF binary and the features that the loader should use
// Note that we currently hardcode the features to be used by the loader,
// so features isn't actually used yet.
message ELFLoaderCtx {
    ELFBinary elf = 1;
    FeatureSet features = 2;
}

// Captures the results of a elf binary load.
// Structurally similar to fd_sbpf_program_t
message ELFLoaderEffects {
    bytes rodata = 1;
    uint64 rodata_sz = 2;

    // bytes text = 3; // not needed, just points to a region in rodata
    uint64 text_cnt = 4;
    uint64 text_off = 5;

    uint64 entry_pc = 6;

    repeated uint64 calldests = 7;
}

message ELFLoaderFixture {
    ELFLoaderCtx input = 1;
    ELFLoaderEffects output = 2;
}